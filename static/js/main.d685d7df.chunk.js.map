{"version":3,"sources":["logo.svg","Components/LockContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LockContainer","props","containerStyle","width","height","useState","inputText","setInputText","isLocked","password","id","style","children","backgroundColor","color","top","className","onChange","evt","target","value","type","App","time","setTime","setPassword","useEffect","setTimeout","Date","now","toString","display","gridTemplateColumns","src","frameBorder","allow","allowFullScreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,4IC0D5BC,MAvDf,SAAuBC,GAEnB,IAAMC,EAAiB,CACnBC,MAAOF,EAAME,MACbC,OAAQH,EAAMG,QAJQ,EA+BQC,mBAAS,IA/BjB,mBA+BnBC,EA/BmB,KA+BRC,EA/BQ,KAgCtBC,EAAW,WACX,OAAQF,GAAaL,EAAMQ,UAQ/B,OACI,yBAAKC,GAAG,sBAAsBC,MAAOT,GACjC,yBAAKQ,GAAG,0BAEHT,EAAMW,UAEX,yBAAKF,GAAG,aAAaC,MAvCrB,CAGIE,gBAAiBZ,EAAMa,MACvBX,MAAOF,EAAME,MACbC,OAAQH,EAAMG,OAAS,EACvBW,IAAKP,IAAa,EAAI,EAAGP,EAAMG,OAAS,GAiCGY,UAAU,gBACrD,2BAAOC,SAZnB,SAA2BC,GAEvBX,EAAaW,EAAIC,OAAOC,QAUoBV,GAAG,sBAAsBW,KAAK,UAEtE,yBAAKX,GAAG,aAAaC,MA9BrB,CAGIE,gBAAiBZ,EAAMa,MACvBX,MAAOF,EAAME,MACbC,OAAQH,EAAMG,OAAS,EACvBW,IAAKP,IAAaP,EAAMG,OAAS,EAAIH,EAAMG,QAwBGY,UAAU,mBCMzDM,MAtDf,WAAgB,IAAD,EAEWjB,mBAAS,GAFpB,mBAENkB,EAFM,KAEAC,EAFA,OAGmBnB,mBAAS,eAH5B,mBAGNI,EAHM,KAGIgB,EAHJ,KAmBb,OAdAC,qBAAU,WACRC,YAAW,WACTH,EAAQI,KAAKC,MAAMC,cAClB,QAGLH,YAAW,eAST,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAahB,uCAAY,2BAAOC,SAnBA,SAACC,GACxBO,EAAYP,EAAIC,OAAOC,QAkB4BA,MAAOX,KACtD,kBAAC,EAAD,CAAeA,SAAUA,EAAUL,OAAQ,IAAKD,MAAO,IAAKW,MAAM,SAChE,yBAAKH,MAAO,CAACoB,QAAQ,OAAQC,oBAAqB,cAChD,kBAAC,EAAD,CAAevB,SAAUA,EAAUL,OAAQ,IAAKD,MAAO,IAAKW,MAAM,QAClE,kBAAC,EAAD,CAAeL,SAAUA,EAAUL,OAAQ,IAAKD,MAAO,IAAKW,MAAM,UAClE,kBAAC,EAAD,CAAeL,SAAUA,EAAUL,OAAQ,IAAKD,MAAO,IAAKW,MAAM,SAClE,kBAAC,EAAD,CAAeL,SAAUA,EAAUL,OAAQ,IAAKD,MAAO,IAAKW,MAAM,WAChE,4BAAQmB,IAAI,4CAA4CC,YAAY,IAC5DC,MAAM,2FACNC,iBAAe,OAI7B,iFACA,6DAAmCb,MCzCvBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d685d7df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport './LockContainer.css';\n\nfunction LockContainer(props) {\n\n    const containerStyle = {\n        width: props.width,\n        height: props.height\n    };\n    let overlayStyleTop = () => {\n        return (\n            {\n                // width: isLocked() ? props.width : 0,\n                // height: isLocked() ? props.height / 2 : 0,\n                backgroundColor: props.color,\n                width: props.width,\n                height: props.height / 2,\n                top: isLocked() ? 0 : 0- props.height / 2,\n            }\n        )\n    }\n    let overlayStyleBottom = () => {\n        return (\n            {\n                // width: isLocked() ? props.width : 0,\n                // height: isLocked() ? props.height / 2 : 0,\n                backgroundColor: props.color,\n                width: props.width,\n                height: props.height / 2,\n                top: isLocked() ? props.height / 2 : props.height,\n            }\n        )\n    }\n\n    const [inputText, setInputText] = useState(\"\");\n    let isLocked = () => {\n        return (inputText != props.password);\n    }\n\n    function handleInputChange(evt){\n        // console.log(evt.target.value);\n        setInputText(evt.target.value);\n    }\n\n    return (\n        <div id=\"lock-container-main\" style={containerStyle}>\n            <div id=\"lock-container-content\">\n                {/*<p>Current text is \"{inputText}\". Locked: {isLocked().toString()}</p>*/}\n                {props.children}\n            </div>\n            <div id=\"lock-div-1\" style={overlayStyleTop()} className=\"lock-overlay\">\n                <input onChange={handleInputChange} id=\"lock-password-input\" type=\"text\"></input>\n            </div>\n            <div id=\"lock-div-2\" style={overlayStyleBottom()} className=\"lock-overlay\"></div>\n        </div>\n    );\n}\n\nexport default LockContainer;","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LockContainer from \"./Components/LockContainer\";\n\nfunction App() {\n\n  const [time, setTime] = useState(0);\n  const [password, setPassword] = useState(\"password123\");\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTime(Date.now().toString())\n    }, 100)\n  });\n\n  setTimeout(() => {\n    \n  })\n\n  const handlePassChange = (evt) => {\n    setPassword(evt.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n        {/*<p>*/}\n        {/*  Edit <code>src/App.js</code> and save to reload.*/}\n        {/*</p>*/}\n        {/*<a*/}\n        {/*  className=\"App-link\"*/}\n        {/*  href=\"https://reactjs.org\"*/}\n        {/*  target=\"_blank\"*/}\n        {/*  rel=\"noopener noreferrer\"*/}\n        {/*>*/}\n        {/*  Learn React*/}\n        {/*</a>*/}\n        <p>Cur Pass <input onChange={handlePassChange} value={password}></input></p>\n        <LockContainer password={password} height={500} width={500} color=\"black\">\n          <div style={{display:\"grid\", gridTemplateColumns: \"auto auto\"}}>\n            <LockContainer password={password} height={250} width={250} color=\"red\"></LockContainer>\n            <LockContainer password={password} height={250} width={250} color=\"green\"></LockContainer>\n            <LockContainer password={password} height={250} width={250} color=\"blue\"></LockContainer>\n            <LockContainer password={password} height={250} width={250} color=\"#123456\">\n              <iframe src=\"https://www.youtube.com/embed/hDkuUZ3F1GU\" frameBorder=\"0\"\n                      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                      allowFullScreen></iframe>\n            </LockContainer>\n          </div>\n        </LockContainer>\n        <p>nametable's website - Very much a work in progress</p>\n        <p>Your computer says the time is {time}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}